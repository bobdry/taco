{"version":3,"sources":["serviceWorker.js","components/FlourHook.js","components/CornHook.js","components/IngredientsGridHook.js","components/SubmitBoxes.js","TacoHook.js","index.js"],"names":["Boolean","window","location","hostname","match","FlourHook","props","className","onClick","handleClickFlour","tacoIngredientStack","CornHook","handleClickCorn","BRed","handleClickIngred","BBlue","BGreen","IngredientsGridHook","SubmitBoxes","handleSubmitBoxes","TacoHook","useState","tacoChildren","setTacoChildren","isHidden","setIsHidden","setTacoIngredientStack","TastyRed","TastyBlue","TastyGreen","key","map","item","idx","temp","splice","handleClickRemoveIngred","e","length","target","alert","submittedBox","push","type","name","forEach","rootElement","document","getElementById","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.53344bb8.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","////////////////////////////FlourHook.js \nimport React from 'react'; \n\nfunction FlourHook(props) { \n    return ( \n        <div className=\"flourStyle\" onClick={props.handleClickFlour} > \n            {props.tacoIngredientStack} \n        </div> \n    );\n    } \n    \nexport default FlourHook; ","////////////////////////////CornHook.js \nimport React from 'react'; \n\nfunction CornHook(props) { \n    return ( \n        <div className=\"cornStyle\" onClick={props.handleClickCorn} > \n            {props.tacoIngredientStack} \n        </div> \n    ); \n} \n\nexport default CornHook; \n","////////////////////////////IngredientsGridHook.js \nimport React from 'react'; \n\nfunction BRed(props) { \n    return ( \n        <button className=\"red\" onClick={props.handleClickIngred}>Red</button> \n    ); \n} \nfunction BBlue(props) { \n    return ( \n        <button className=\"blue\" onClick={props.handleClickIngred}>Blue</button> \n        ); \n    } \nfunction BGreen(props) {\n    return ( \n        <button className=\"green\" onClick={props.handleClickIngred}>Green</button> \n    ); \n} \n\nfunction IngredientsGridHook(props) { \n    return ( \n        <div className=\"ingredientsStyle\">\n            <BRed handleClickIngred={props.handleClickIngred}/> \n            <BBlue handleClickIngred={props.handleClickIngred}/> \n            <BGreen handleClickIngred={props.handleClickIngred}/> \n        </div> \n    ); \n} \n\nexport default IngredientsGridHook; \n","import React from 'react';\n\nfunction SubmitBoxes(props) {\n    return (\n        <div>\n            <p className=\"submitter\">\n                <button onClick={props.handleSubmitBoxes}>Submit Box</button>\n            </p>\n        </div>\n    );\n}\n\nexport default SubmitBoxes;","///////////////////////TacoHookjs \nimport React, { useState } from 'react'; \nimport FlourHook from \"./components/FlourHook\"; \nimport CornHook from \"./components/CornHook\"; \nimport IngredientsGridHook from './components/IngredientsGridHook'; \nimport SubmitBoxes from './components/SubmitBoxes'; \n\nfunction TacoHook() { \n    const [tacoChildren, setTacoChildren] = useState([]); \n    const [isHidden, setIsHidden] = useState(true); \n    const [tacoIngredientStack, setTacoIngredientStack] = useState([]); \n    \n    function handleClickFlour () { \n        setTacoChildren([<FlourHook key= { 0} />]); \n        setIsHidden(false); \n    } \n    \n    function handleClickCorn () { \n        setTacoChildren([<CornHook key={ 1 }/>]); \n        setIsHidden(false); \n    } \n    \n    function handleClickRemove () { \n        setTacoChildren([]); \n        setTacoIngredientStack([]); \n        setIsHidden(true); \n    } \n\n//ingredient components \nfunction TastyRed() { \n    return ( \n    <div className=\"ingIng redIng\">RED</div> \n    ); \n} \nfunction TastyBlue() { \n    return ( \n    <div className=\"ingIng blueIng\">BLUE</div> \n    ); \n} \nfunction TastyGreen() { \n    return ( <div className=\"ingIng greenIng\">GREEN</div> \n    ); \n} \n\nfunction handleClickRemoveIngred (idx) {\n// assigning the list to temp variable \nconst temp = [...tacoIngredientStack]; \n// removing the element using splice \ntemp.splice(idx, 1); \n// updating the list \nsetTacoIngredientStack(temp); \n} \n\nfunction handleClickIngred (e) {\n    let idx = tacoIngredientStack.length; \n    if (idx < 12) { \n        if (e.target.className === 'red') { \n            setTacoIngredientStack([...tacoIngredientStack, <TastyRed key={idx}/>]); \n        } \n        if (e.target.className === 'blue') { \n            setTacoIngredientStack([...tacoIngredientStack, <TastyBlue key={idx}/>]); \n        } \n        if (e.target.className === 'green') { \n            setTacoIngredientStack([...tacoIngredientStack, <TastyGreen key= { idx}/>]); \n        } \n    } \n    else { \n        alert('The BOX is FULL!'); \n    } \n} \n\nfunction handleSubmitBoxes() {\n    let submittedBox = [];\n    if (tacoIngredientStack.length > 0) {\n        submittedBox.push(tacoChildren[0].type.name);\n        tacoIngredientStack.forEach(function (item) { \n            submittedBox.push(item.type.name);\n        });\n        alert(submittedBox);\n    }\n    else {\n        alert('add pills');\n    }\n}\n\nreturn ( \n<div> \n    <div className={`torts ${isHidden ? \"down\" : \"up\"}`}> \n        <FlourHook handleClickFlour={handleClickFlour}/> \n        <CornHook handleClickCorn={handleClickCorn}/> \n    </div> \n    <div className=\"tacoContainer\"> \n        {!isHidden && <button className=\"removeB\" onClick={handleClickRemove}>X</button>} \n        <div className=\"tacoIngredientContainer\"> \n        <ul>\n        {tacoIngredientStack.map((item, idx) => ( \n            <li key={idx}>\n                {item} <button onClick={() => handleClickRemoveIngred(idx)}>X</button>\n            </li>\n        ))}\n        </ul>\n        </div> \n        {tacoChildren} \n        </div> \n    <div className={`ingreds-vis ${isHidden ? \"hide\" : \"show\"}`}> \n        {!isHidden && <IngredientsGridHook handleClickIngred={handleClickIngred}/>}\n        {!isHidden && <SubmitBoxes handleSubmitBoxes={handleSubmitBoxes}/>} \n    </div> \n</div> \n); \n} \n        \nexport default TacoHook; ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport TacoHook from \"./TacoHook\";\n\nconst rootElement = document.getElementById(\"root\"); \nReactDOM.render( <TacoHook />, rootElement);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}