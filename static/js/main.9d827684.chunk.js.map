{"version":3,"sources":["serviceWorker.js","components/Flour.js","components/Corn.js","components/Ingredient.js","components/IngredientGrid.js","components/SubmitBoxes.js","components/ResetOrder.js","Taco.js","index.js"],"names":["Boolean","window","location","hostname","match","FlourHook","props","className","onClick","handleClickFlour","CornHook","handleClickCorn","IngHook","handleIngChoice","isChoice","IngredientsGridHook","map","choice","idx","key","handleClickIngred","SubmitOrder","handleSubmitOrder","ResetOrder","handleResetOrder","Taco","useState","tacoChildren","setTacoChildren","isHidden","setIsHidden","isSubmitted","setIsSubmitted","tacoIngredientStack","setTacoIngredientStack","Flour","Corn","item","temp","splice","handleClickRemoveIngred","IngredientGrid","e","length","target","Ingredient","alert","SubmitBoxes","submittedBox","push","type","name","forEach","scrollTo","href","title","rel","rootElement","document","getElementById","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9d827684.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","//////////////////////////// Flour \nimport React from 'react'; \n\nfunction FlourHook(props) { \n    return ( \n        <div className=\"tortilla flour\" onClick={props.handleClickFlour} > \n            <p>Flour</p>\n        </div> \n    );\n    } \n    \nexport default FlourHook; ","//////////////////////////// Corn \nimport React from 'react'; \n\nfunction CornHook(props) { \n    return ( \n        <div className=\"tortilla corn\" onClick={props.handleClickCorn} > \n        <p>Corn</p>\n        </div> \n    ); \n} \n\nexport default CornHook; \n","//////////////////////////// Ingredient \nimport React from 'react'; \n\nfunction IngHook(props) { \n        return ( \n            <div className={`ingChoice ${props.handleIngChoice}`}>\n                {props.handleIngChoice} \n            </div>\n        );\n    } \n    \nexport default IngHook; ","//////////////////////////// IngredientGrid \nimport React from 'react'; \n\nlet isChoice = ['Chicken','Beef','al Pastor','Fish','Shrimp','Tofu','Black Beans','Pinto Beans','Lettuce','Tomatoes','Onions','Cheese','Crema','Guacamole','Red Salsa','Green Salsa']\n\nfunction IngredientsGridHook(props) { \n    return (     \n        <div className=\"ingredients\">\n            <ul>\n            {isChoice.map((choice, idx) => ( \n                <li key={idx}>\n                    <button className={choice} onClick={props.handleClickIngred}>{choice}</button> \n                </li>\n            ))}\n            </ul>\n        </div> \n    ); \n} \n\nexport default IngredientsGridHook; \n","//////////////////////////// SubmitBoxes \nimport React from 'react';\n\nfunction SubmitOrder(props) {\n    return (\n        <div>\n            <p className=\"submitter\">\n                <button onClick={props.handleSubmitOrder}><strong>&bull; Order Taco &bull;</strong></button>\n            </p>\n        </div>\n    );\n}\n\nexport default SubmitOrder;","//////////////////////////// ResetOrder\nimport React from 'react';\n\nfunction ResetOrder(props) {\n    return (\n        <div>\n            <p className=\"submitter\">\n                <button onClick={props.handleResetOrder}><strong>&bull; Order Another &bull;</strong></button>\n            </p>\n        </div>\n    );\n}\n\nexport default ResetOrder;","/////////////////////// Taco \nimport React, { useState } from 'react'; \nimport Flour from \"./components/Flour\"; \nimport Corn from \"./components/Corn\"; \nimport Ingredient from \"./components/Ingredient\"; \nimport IngredientGrid from './components/IngredientGrid'; \nimport SubmitBoxes from './components/SubmitBoxes';\nimport ResetOrder from './components/ResetOrder';  \n\nfunction Taco() { \n    const [tacoChildren, setTacoChildren] = useState([]); \n    const [isHidden, setIsHidden] = useState(true);\n    const [isSubmitted, setIsSubmitted] = useState(true); \n    const [tacoIngredientStack, setTacoIngredientStack] = useState([]); \n    \n    function handleClickFlour () { \n        setTacoChildren([<Flour key= {0}/>]); \n        setIsHidden(false); \n    } \n    \n    function handleClickCorn () { \n        setTacoChildren([<Corn key={1}/>]); \n        setIsHidden(false); \n    } \n    \n    function handleClickRemove () { \n        setTacoChildren([]); \n        setTacoIngredientStack([]); \n        setIsHidden(true); \n    } \n\n    function handleClickReset () { \n        setTacoIngredientStack([]); \n    } \n\n    function handleClickRemoveIngred (idx) {\n        // assigning the list to temp variable \n        const temp = [...tacoIngredientStack]; \n        // removing the element using splice \n        temp.splice(idx, 1); \n        // updating the list \n        setTacoIngredientStack(temp); \n    } \n\n    function handleClickIngred (e) {\n        let idx = tacoIngredientStack.length; \n        let handleIngChoice = e.target.className;\n        if (idx < 9) { \n            setTacoIngredientStack([...tacoIngredientStack, <Ingredient handleIngChoice={handleIngChoice} key= {idx}/>]);  \n        } \n        else { \n            alert('Your Taco is FULL!'); \n        } \n    } \n\n    function handleSubmitOrder() {\n        let submittedBox = [];\n        if (tacoIngredientStack.length > 0) {\n            submittedBox.push(tacoChildren[0].type.name);\n            tacoIngredientStack.forEach(function (item) { \n                submittedBox.push(item.type.name);\n            });\n            setIsSubmitted(false);\n            window.scrollTo(0,0);\n        }\n        else {\n            alert('Add some tasty ingredients.');\n        }\n    }\n\n    function handleResetOrder() {\n        setTacoChildren([]); \n        setTacoIngredientStack([]); \n        setIsHidden(true); \n        setIsSubmitted(true);\n        window.scrollTo(0,0);\n    }\n\n    return ( \n        <div> \n        <div className={`torts ${isHidden ? \"down\" : \"up\"}`}>\n            <div className=\"taco-title\">\n                <h1>Infinite Taco</h1>\n                <p>A simple app for taco customization.</p>\n            </div>\n            <Flour handleClickFlour={handleClickFlour}/> \n            <Corn handleClickCorn={handleClickCorn}/> \n            {isHidden && <p><strong>Pick a shell.</strong></p>}\n        </div> \n        <div className=\"tacoContainer\"> \n            {!isHidden && <button className=\"removeB taco-back\" onClick={handleClickRemove}></button>} \n            {!isHidden && <button className=\"removeB taco-reset\" onClick={handleClickReset}></button>} \n            <div className={`tacoIngredientContainer ${isHidden ? \"hide\" : \"show\"}`}> \n                <ul>\n                {tacoIngredientStack.map((item, idx) => ( \n                    <li key={idx} onClick={() => handleClickRemoveIngred(idx)}>\n                        {item}\n                    </li>\n                ))}\n                </ul>\n            </div> \n            {tacoChildren} \n            <div className={`ingreds-vis ${isHidden ? \"hide\" : \"show\"}`}> \n                {!isHidden && <IngredientGrid handleClickIngred={handleClickIngred}/>}\n                {!isHidden && <SubmitBoxes handleSubmitOrder={handleSubmitOrder}/>} \n            </div>\n            <div className={`order-submitted ${isSubmitted ? \"hide\" : \"show\"}`}>\n                <div className=\"rims\">\n                    <div className=\"taco-rim\"></div>\n                    <div className=\"taco-rim-blue\"></div>\n                </div>\n                <h3><em>What a delicious taco!</em></h3>\n                <ResetOrder handleResetOrder={handleResetOrder}/>\n            </div>\n        </div> \n        <div className=\"monkik-icons\">\n            <p>Infinite Taco = react + gh-pages</p>\n            <p>icons by <a href=\"https://www.flaticon.com/authors/monkik\" title=\"monkik\" target=\"_blank\" rel=\"noopener noreferrer\">monkik</a></p>\n        </div>\n        </div> \n    ); \n} \n        \nexport default Taco; ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport Taco from \"./Taco\";\n\nconst rootElement = document.getElementById(\"root\"); \nReactDOM.render( <Taco />, rootElement);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}